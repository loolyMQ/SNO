'use client';

import { useState, useEffect } from 'react';

import { ApiService } from '../services/ApiService';

import type { GraphNode, GraphEdge, GraphData } from '../types';

import { GraphCanvas } from './GraphCanvas';
import { SearchBar } from './SearchBar';

interface Tab {
  id: string;
  title: string;
  type: 'main' | 'category' | 'topic';
  data?: GraphData;
}

interface Category {
  id: string;
  name: string;
  description: string;
  connections: string[];
}

export function ObsidianLayout() {
  const [tabs, setTabs] = useState<Tab[]>([{ id: 'main', title: '–ì–ª–∞–≤–Ω–∞—è', type: 'main' }]);
  const [activeTab, setActiveTab] = useState('main');
  const [categories, setCategories] = useState<Category[]>([
    {
      id: 'science-map',
      name: '–ö–∞—Ä—Ç–∞ –Ω–∞—É–∫–∏',
      description: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—É—á–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
      connections: ['lectures', 'category3', 'category4'],
    },
    {
      id: 'lectures',
      name: '–î–µ–ø–æ–∑–∏—Ç–∞—Ä–∏–π –ª–µ–∫—Ü–∏–π',
      description: '–ê—Ä—Ö–∏–≤ –ª–µ–∫—Ü–∏–π –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
      connections: ['science-map', 'category3', 'category4'],
    },
    {
      id: 'category3',
      name: '',
      description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3',
      connections: ['science-map', 'lectures', 'category4'],
    },
    {
      id: 'category4',
      name: '',
      description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4',
      connections: ['science-map', 'lectures', 'category3'],
    },
  ]);

  const [rightGraphData, setRightGraphData] = useState<GraphData>({ nodes: [], edges: [] });
  const [error, setError] = useState<string | null>(null);

  const apiService = new ApiService();

  useEffect(() => {
    loadMainData();
    loadCategories();
  }, []);

  useEffect(() => {
    generateRightGraph();
  }, [categories]);

  const loadMainData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const data = await apiService.getGraphData();
      setMainGraphData(data);
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const loadCategories = async () => {
    try {
      const data = await apiService.getCategories();
      if (data && data.categories) {
        setCategories(data.categories);
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  };

  const generateRightGraph = () => {
    const nodes: GraphNode[] = [
      {
        id: 'main',
        label: '–ì–ª–∞–≤–Ω–∞—è',
        type: 'topic',
        x: 0,
        y: 0,
      },
    ];

    const edges: GraphEdge[] = [];

    categories.forEach((category, index) => {
      const angle = (index / categories.length) * 2 * Math.PI;
      const radius = 150;

      nodes.push({
        id: category.id,
        label: category.name,
        type: 'topic',
        x: Math.cos(angle) * radius,
        y: Math.sin(angle) * radius,
      });

      edges.push({
        id: `e-${category.id}`,
        source: 'main',
        target: category.id,
        type: 'related_to',
        weight: 0.8,
      });
    });

    setRightGraphData({ nodes, edges });
  };

  const handleCategoryClick = async (categoryId: string) => {
    const category = categories.find((c) => c.id === categoryId);
    if (!category) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞
    const existingTab = tabs.find((tab) => tab.id === categoryId);
    if (existingTab) {
      setActiveTab(categoryId);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    const newTab: Tab = {
      id: categoryId,
      title: category.name || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}`,
      type: 'category',
      data: { nodes: [], edges: [] }, // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    };

    setTabs([...tabs, newTab]);
    setActiveTab(categoryId);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try {
      const categoryData = await generateCategoryGraph(category);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setTabs((prevTabs) =>
        prevTabs.map((tab) => (tab.id === categoryId ? { ...tab, data: categoryData } : tab)),
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    }
  };

  const generateCategoryGraph = async (category: Category): Promise<GraphData> => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const response = await apiService.getCategoryTopics(category.id);
      const topics = response.topics || [];

      const nodes: GraphNode[] = [
        {
          id: category.id,
          label: category.name || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.id}`,
          type: 'topic',
          x: 0,
          y: 0,
        },
      ];

      const edges: GraphEdge[] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      topics.forEach((topic: any, index: number) => {
        const angle = (index / Math.max(topics.length, 1)) * 2 * Math.PI;
        const radius = 150;

        nodes.push({
          id: topic.id,
          label: topic.title || topic.name,
          type: 'topic',
          x: Math.cos(angle) * radius,
          y: Math.sin(angle) * radius,
        });

        edges.push({
          id: `e-${category.id}-${topic.id}`,
          source: category.id,
          target: topic.id,
          type: 'related_to',
          weight: 0.8,
        });
      });

      return { nodes, edges };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        nodes: [
          {
            id: category.id,
            label: category.name || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.id}`,
            type: 'topic',
            x: 0,
            y: 0,
          },
        ],
        edges: [],
      };
    }
  };

  const handleTopicClick = (topicId: string, _categoryId: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞
    const existingTab = tabs.find((tab) => tab.id === topicId);
    if (existingTab) {
      setActiveTab(topicId);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Ç–µ–º—ã
    const newTab: Tab = {
      id: topicId,
      title: `–¢–µ–º–∞: ${topicId}`,
      type: 'topic',
    };

    setTabs([...tabs, newTab]);
    setActiveTab(topicId);
  };

  const closeTab = (tabId: string) => {
    if (tabId === 'main') return; // –ì–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å

    const newTabs = tabs.filter((tab) => tab.id !== tabId);
    setTabs(newTabs);

    if (activeTab === tabId) {
      setActiveTab('main');
    }
  };

  const activeTabData = tabs.find((tab) => tab.id === activeTab);

  return (
    <div className="obsidian-layout">
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="left-panel">
        <div className="navigation-buttons">
          <button className="nav-button active" onClick={() => setActiveTab('main')}>
            <span className="nav-icon">üè†</span>
            <span className="nav-label">–ì–ª–∞–≤–Ω–∞—è</span>
          </button>
          <button className="nav-button" onClick={() => {}}>
            <span className="nav-icon">üîç</span>
            <span className="nav-label">–ü–æ–∏—Å–∫</span>
          </button>
          <button className="nav-button" onClick={() => {}}>
            <span className="nav-icon">üìä</span>
            <span className="nav-label">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
          </button>
          <button className="nav-button" onClick={() => {}}>
            <span className="nav-icon">‚öôÔ∏è</span>
            <span className="nav-label">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
          </button>
          <button className="nav-button" onClick={() => {}}>
            <span className="nav-icon">üìö</span>
            <span className="nav-label">–°–ø—Ä–∞–≤–∫–∞</span>
          </button>
        </div>
      </div>

      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="center-panel">
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="tabs-container">
          {tabs.map((tab) => (
            <div
              key={tab.id}
              className={`tab ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className="tab-icon">
                {tab.type === 'main' && 'üè†'}
                {tab.type === 'category' && 'üìÅ'}
                {tab.type === 'topic' && 'üìÑ'}
              </span>
              <span className="tab-title">{tab.title}</span>
              {tab.id !== 'main' && (
                <button
                  className="tab-close"
                  onClick={(e) => {
                    e.stopPropagation();
                    closeTab(tab.id);
                  }}
                >
                  √ó
                </button>
              )}
            </div>
          ))}
          <button className="tab-add" onClick={() => {}} title="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É">
            +
          </button>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ */}
        <div className="tab-content">
          {activeTab === 'main' ? (
            <div className="main-page">
              <div className="page-header">
                <h1>–ì–ª–∞–≤–Ω–∞—è</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—É—á–Ω—ã—Ö —Å–≤—è–∑–µ–π</p>
              </div>

              <div className="search-section">
                <SearchBar onSearch={() => {}} isLoading={false} />
              </div>

              <div className="categories-grid">
                <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
                <div className="categories-list">
                  {categories.map((category) => (
                    <div
                      key={category.id}
                      className="category-item"
                      onClick={() => handleCategoryClick(category.id)}
                      style={{ cursor: 'pointer' }}
                    >
                      <div className="category-icon">üìÅ</div>
                      <div className="category-info">
                        <h3>{category.name || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.id}`}</h3>
                        <p>{category.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {error && <div className="error">{error}</div>}
            </div>
          ) : activeTabData?.type === 'category' ? (
            <div className="category-page">
              <div className="page-header">
                <h1>{activeTabData?.title}</h1>
                <p>–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
              </div>

              <div className="category-graph-container">
                {activeTabData?.data && (
                  <GraphCanvas
                    graphData={activeTabData.data}
                    physicsConfig={{
                      repulsion: 200,
                      attraction: 0.1,
                      gravity: 0.01,
                      damping: 0.9,
                      naturalLinkLength: 100,
                      maxLinkStretch: 200,
                      minLinkLength: 50,
                      springStiffness: 0.1,
                      springDamping: 0.8,
                      initialTemperature: 1000,
                      minTemperature: 0.1,
                      coolingRate: 0.95,
                      adaptiveFPS: true,
                      targetFPS: 60,
                      maxFPS: 120,
                      minFPS: 30,
                    }}
                    onGraphUpdate={() => {}}
                    isLoading={false}
                    onNodeClick={(nodeId) => {
                      // –ö–ª–∏–∫ –ø–æ —É–∑–ª—É
                      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–º–µ
                      handleTopicClick(nodeId, activeTab);
                    }}
                  />
                )}
              </div>
            </div>
          ) : activeTabData?.type === 'topic' ? (
            <div className="topic-page">
              <div className="page-header">
                <h1>{activeTabData?.title}</h1>
                <p>–°–≤—è–∑–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ</p>
              </div>

              <div className="topic-content">
                <div className="topic-info">
                  <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ</h2>
                  <p>ID —Ç–µ–º—ã: {activeTabData?.id}</p>
                  <p>–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏ –µ—ë —Å–≤—è–∑—è—Ö.</p>
                </div>
              </div>
            </div>
          ) : null}
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞—Ñ–æ–º (–≤–µ–∑–¥–µ) */}
      <div className="right-panel">
        <div className="panel-header">
          <h3>–°–≤—è–∑–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h3>
        </div>
        <div className="right-graph-container">
          <GraphCanvas
            graphData={rightGraphData}
            physicsConfig={{
              repulsion: 150,
              attraction: 0.1,
              gravity: 0.01,
              damping: 0.9,
              naturalLinkLength: 80,
              maxLinkStretch: 150,
              minLinkLength: 40,
              springStiffness: 0.1,
              springDamping: 0.8,
              initialTemperature: 500,
              minTemperature: 0.1,
              coolingRate: 0.95,
              adaptiveFPS: true,
              targetFPS: 60,
              maxFPS: 120,
              minFPS: 30,
            }}
            onGraphUpdate={() => {}}
            isLoading={false}
            onNodeClick={handleCategoryClick}
          />
        </div>
      </div>
    </div>
  );
}
