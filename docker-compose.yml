version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: science_map
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # MeiliSearch
  meilisearch:
    image: getmeili/meilisearch:v1.5
    ports:
      - "7700:7700"
    environment:
      MEILI_MASTER_KEY: masterKey
    volumes:
      - meilisearch_data:/meili_data

  # Services
  api-gateway:
    build:
      context: .
      dockerfile: backend/api-gateway/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - AUTH_SERVICE_URL=http://auth-service:3001
      - GRAPH_SERVICE_URL=http://graph-service:3004
      - SEARCH_SERVICE_URL=http://search-service:3005
      - JOBS_SERVICE_URL=http://jobs-service:3006
    depends_on:
      - postgres
      - redis
      - kafka
      - auth-service
      - graph-service
      - search-service
      - jobs-service

  auth-service:
    build:
      context: .
      dockerfile: backend/auth-service/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=science_map
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key
    depends_on:
      - postgres
      - redis
      - kafka

  graph-service:
    build:
      context: .
      dockerfile: backend/graph-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - redis
      - kafka

  search-service:
    build:
      context: .
      dockerfile: backend/search-service/Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - MEILISEARCH_URL=http://meilisearch:7700
      - MEILISEARCH_API_KEY=masterKey
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - meilisearch
      - kafka

  jobs-service:
    build:
      context: .
      dockerfile: backend/jobs-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - redis
      - kafka

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3002
    depends_on:
      - api-gateway

volumes:
  postgres_data:
  redis_data:
  meilisearch_data:

networks:
  default:
    name: sno-network
